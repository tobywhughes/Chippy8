from array import array
import numpy as np

class Chip8:

	def __init__(self):
		self.fontset = array('H', 
 		[0xF0, 0x90, 0x90, 0x90, 0xF0, 
	  	0x20, 0x60, 0x20, 0x20, 0x70, 
	  	0xF0, 0x10, 0xF0, 0x80, 0xF0, 
	    0xF0, 0x10, 0xF0, 0x10, 0xF0, 
	    0x90, 0x90, 0xF0, 0x10, 0x10, 
	    0xF0, 0x80, 0xF0, 0x10, 0xF0, 
	    0xF0, 0x80, 0xF0, 0x90, 0xF0, 
	    0xF0, 0x10, 0x20, 0x40, 0x40, 
	    0xF0, 0x90, 0xF0, 0x90, 0xF0, 
	    0xF0, 0x90, 0xF0, 0x10, 0xF0, 
	    0xF0, 0x90, 0xF0, 0x90, 0x90, 
	    0xE0, 0x90, 0xE0, 0x90, 0xE0, 
	    0xF0, 0x80, 0x80, 0x80, 0xF0, 
	    0xE0, 0x90, 0x90, 0x90, 0xE0, 
	    0xF0, 0x80, 0xF0, 0x80, 0xF0, 
	    0xF0, 0x80, 0xF0, 0x80, 0x80])

	def initialize(self, pixels):
		self.stack = []
		self.opcode = 0
		self.memory = [0] * 4096
		self.pc = 0x200
		self.I = 0
		self.sp = 0
		#Init clear screen
		graphics = [0] * pixels

		#Fontset
		for i in range(80):
			self.memory[i] = self.fontset[i]

		self.draw_flag = True

	def load_game(self, file_name):
		with open(file_name, "rb") as f:
			byte = f.read()
			for i in range(len(byte)):
				self.memory[self.pc + i] = byte[i]

	def emulate_cycle(self):
		#Gets opcode
		self.opcode = self.memory[self.pc] << 8 | self.memory[self.pc + 1]
		
		#Decodes
		if(self.opcode & 0xF000 == 0x2000):
			self.stack.append(self.pc)
			self.pc = self.opcode & 0x0FFF
		#Not currently made list
		else:
			print(hex(self.opcode))

	def set_keys(self):
		pass

if __name__ == "__main__":
	from main import main_func
	main_func()
